$NOLIST
$MODLP51
$LIST

org 0000H
   ljmp MyProgram
   
org 0x000B
	ljmp Timer0_ISR
; Timer/Counter 2 overflow interrupt vector
org 0x002B
	ljmp Timer2_ISR

; These register definitions needed by 'math32.inc'
DSEG at 30H
x:   ds 4
y:   ds 4
z:   ds 4
bcd: ds 5
T2ov: ds 2 ; 16-bit timer 2 overflow (to measure the period of very slow signals)
Seed: ds 4
p1Score: ds 1
p2Score: ds 1
capacitance: ds 4


BSEG
mf: dbit 1

$NOLIST
$include(math32.inc)
$LIST

cseg
; These 'equ' must match the hardware wiring
LCD_RS equ P3.2
;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
LCD_E  equ P3.3
LCD_D4 equ P3.4
LCD_D5 equ P3.5
LCD_D6 equ P3.6
LCD_D7 equ P3.7
START	equ P0.0
$NOLIST
$include(LCD_4bit.inc) ; A library of LCD related functions and utility macros
$LIST

CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
TIMER0_OFF_RATE    EQU 65536
TIMER0_OFF_RELOAD EQU ((65536-(CLK/TIMER0_OFF_RATE)))
TIMER0_RATE   EQU 783     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
TIMER0_RATE_HIGH EQU 4096
TIMER0_RATE_LOW EQU 1000
TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
TIMER0_RELOAD_HIGH EQU ((65536-(CLK/TIMER0_RATE_HIGH)))
TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
;Timer0_Rate used to change pitch
TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))

;Music Frequencies
TIMER0_RATE_B3  EQU 247 
TIMER0_RATE_C4  EQU 262 
TIMER0_RATE_CS4	EQU	277
TIMER0_RATE_D4  EQU 294
TIMER0_RATE_DS4 EQU 311
TIMER0_RATE_E4  EQU 330
TIMER0_RATE_F4  EQU 350
TIMER0_RATE_FS4 EQU 370
TIMER0_RATE_G4  EQU 390
TIMER0_RATE_GS4 EQU 415
TIMER0_RATE_A4	EQU 440
TIMER0_RATE_AS4 EQU 466
TIMER0_RATE_B4  EQU 494
 
TIMER0_RATE_C5  EQU 523 
TIMER0_RATE_CS5	EQU	554
TIMER0_RATE_D5  EQU 587
TIMER0_RATE_DS5 EQU 622
TIMER0_RATE_E5  EQU 659
TIMER0_RATE_F5  EQU 698
TIMER0_RATE_FS5 EQU 740
TIMER0_RATE_G5  EQU 784
TIMER0_RATE_GS5 EQU 831
TIMER0_RATE_A5	EQU 880
TIMER0_RATE_AS5 EQU 932
TIMER0_RATE_B5  EQU 988 

TIMER0_RATE_C6  EQU 1047
  

 
;Music frequency add
TIMER0_RELOAD_B3 	EQU ((65536-(CLK/TIMER0_RATE_B3)))
TIMER0_RELOAD_C4 	EQU ((65536-(CLK/TIMER0_RATE_C4)))
TIMER0_RELOAD_CS4 	EQU ((65536-(CLK/TIMER0_RATE_CS4)))
TIMER0_RELOAD_D4 	EQU ((65536-(CLK/TIMER0_RATE_D4)))
TIMER0_RELOAD_DS4 	EQU ((65536-(CLK/TIMER0_RATE_DS4)))
TIMER0_RELOAD_E4	EQU ((65536-(CLK/TIMER0_RATE_E4)))
TIMER0_RELOAD_F4 	EQU ((65536-(CLK/TIMER0_RATE_F4)))
TIMER0_RELOAD_FS4 	EQU ((65536-(CLK/TIMER0_RATE_FS4)))
TIMER0_RELOAD_G4 	EQU ((65536-(CLK/TIMER0_RATE_G4)))
TIMER0_RELOAD_GS4 	EQU ((65536-(CLK/TIMER0_RATE_GS4)))
TIMER0_RELOAD_A4	EQU ((65536-(CLK/TIMER0_RATE_A4)))
TIMER0_RELOAD_AS4 	EQU ((65536-(CLK/TIMER0_RATE_AS4)))
TIMER0_RELOAD_B4 	EQU ((65536-(CLK/TIMER0_RATE_B4)))

TIMER0_RELOAD_C5 	EQU ((65536-(CLK/TIMER0_RATE_C5)))
TIMER0_RELOAD_CS5 	EQU ((65536-(CLK/TIMER0_RATE_CS5)))
TIMER0_RELOAD_D5	EQU ((65536-(CLK/TIMER0_RATE_D5)))
TIMER0_RELOAD_DS5 	EQU ((65536-(CLK/TIMER0_RATE_DS5)))
TIMER0_RELOAD_E5	EQU ((65536-(CLK/TIMER0_RATE_E5)))
TIMER0_RELOAD_F5 	EQU ((65536-(CLK/TIMER0_RATE_F5)))
TIMER0_RELOAD_FS5 	EQU ((65536-(CLK/TIMER0_RATE_FS5)))
TIMER0_RELOAD_G5 	EQU ((65536-(CLK/TIMER0_RATE_G5)))
TIMER0_RELOAD_GS5 	EQU ((65536-(CLK/TIMER0_RATE_GS5)))
TIMER0_RELOAD_A5 	EQU ((65536-(CLK/TIMER0_RATE_A5)))
TIMER0_RELOAD_AS5 	EQU ((65536-(CLK/TIMER0_RATE_AS5)))
TIMER0_RELOAD_B5 	EQU ((65536-(CLK/TIMER0_RATE_B5)))

TIMER0_RELOAD_C6 	EQU ((65536-(CLK/TIMER0_RATE_C6)))

cseg
SOUND_OUT equ P1.1

TIMER0_RATE_B3_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_B3)
	mov TL0, #low(TIMER0_RELOAD_B3)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_B3)
	mov RL0, #low(TIMER0_RELOAD_B3)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret

TIMER0_RATE_C4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_C4)
	mov TL0, #low(TIMER0_RELOAD_C4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_C4)
	mov RL0, #low(TIMER0_RELOAD_C4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret

TIMER0_RATE_CS4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_CS4)
	mov TL0, #low(TIMER0_RELOAD_CS4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_CS4)
	mov RL0, #low(TIMER0_RELOAD_CS4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_D4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_D4)
	mov TL0, #low(TIMER0_RELOAD_D4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_D4)
	mov RL0, #low(TIMER0_RELOAD_D4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret

TIMER0_RATE_DS4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_DS4)
	mov TL0, #low(TIMER0_RELOAD_DS4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_DS4)
	mov RL0, #low(TIMER0_RELOAD_DS4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret

TIMER0_RATE_E4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_E4)
	mov TL0, #low(TIMER0_RELOAD_E4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_E4)
	mov RL0, #low(TIMER0_RELOAD_E4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_F4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_F4)
	mov TL0, #low(TIMER0_RELOAD_F4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_F4)
	mov RL0, #low(TIMER0_RELOAD_F4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_FS4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_FS4)
	mov TL0, #low(TIMER0_RELOAD_FS4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_FS4)
	mov RL0, #low(TIMER0_RELOAD_FS4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_G4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_G4)
	mov TL0, #low(TIMER0_RELOAD_G4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_G4)
	mov RL0, #low(TIMER0_RELOAD_G4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_GS4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_GS4)
	mov TL0, #low(TIMER0_RELOAD_GS4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_GS4)
	mov RL0, #low(TIMER0_RELOAD_GS4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_A4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_A4)
	mov TL0, #low(TIMER0_RELOAD_A4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_A4)
	mov RL0, #low(TIMER0_RELOAD_A4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_AS4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_AS4)
	mov TL0, #low(TIMER0_RELOAD_AS4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_AS4)
	mov RL0, #low(TIMER0_RELOAD_AS4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_B4_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_B4)
	mov TL0, #low(TIMER0_RELOAD_B4)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_B4)
	mov RL0, #low(TIMER0_RELOAD_B4)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_C5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_C5)
	mov TL0, #low(TIMER0_RELOAD_C5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_C5)
	mov RL0, #low(TIMER0_RELOAD_C5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_CS5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_CS5)
	mov TL0, #low(TIMER0_RELOAD_CS5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_CS5)
	mov RL0, #low(TIMER0_RELOAD_CS5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_D5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_D5)
	mov TL0, #low(TIMER0_RELOAD_D5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_D5)
	mov RL0, #low(TIMER0_RELOAD_D5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_DS5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_DS5)
	mov TL0, #low(TIMER0_RELOAD_DS5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_DS5)
	mov RL0, #low(TIMER0_RELOAD_DS5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_E5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_E5)
	mov TL0, #low(TIMER0_RELOAD_E5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_E5)
	mov RL0, #low(TIMER0_RELOAD_E5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_F5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_F5)
	mov TL0, #low(TIMER0_RELOAD_F5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_F5)
	mov RL0, #low(TIMER0_RELOAD_F5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_FS5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_FS5)
	mov TL0, #low(TIMER0_RELOAD_FS5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_FS5)
	mov RL0, #low(TIMER0_RELOAD_FS5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_G5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_G5)
	mov TL0, #low(TIMER0_RELOAD_G5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_G5)
	mov RL0, #low(TIMER0_RELOAD_G5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_GS5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_GS5)
	mov TL0, #low(TIMER0_RELOAD_GS5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_GS5)
	mov RL0, #low(TIMER0_RELOAD_GS5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_A5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_A5)
	mov TL0, #low(TIMER0_RELOAD_A5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_A5)
	mov RL0, #low(TIMER0_RELOAD_A5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_AS5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_AS5)
	mov TL0, #low(TIMER0_RELOAD_AS5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_AS5)
	mov RL0, #low(TIMER0_RELOAD_AS5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
	TIMER0_RATE_B5_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_B5)
	mov TL0, #low(TIMER0_RELOAD_B5)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_B5)
	mov RL0, #low(TIMER0_RELOAD_B5)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
TIMER0_RATE_C6_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_C6)
	mov TL0, #low(TIMER0_RELOAD_C6)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_C6)
	mov RL0, #low(TIMER0_RELOAD_C6)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
;Initializes timer/counter 2 as a 16-bit timer
InitTimer2:
	mov T2CON, #0 ; Stop timer/counter.  Set as timer (clock input is pin 22.1184MHz).
	; Set the reload value on overflow to zero (just in case is not zero)
	mov RCAP2H, #0
	mov RCAP2L, #0
	setb ET2
    ret

Timer2_ISR:
	clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
	push acc
	inc T2ov+0
	mov a, T2ov+0
	jnz Timer2_ISR_done
	inc T2ov+1
Timer2_ISR_done:
	pop acc
	reti

Timer0_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD)
	mov TL0, #low(TIMER0_RELOAD)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD)
	mov RL0, #low(TIMER0_RELOAD)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	
Timer0_HIGH_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD_HIGH)
	mov TL0, #low(TIMER0_RELOAD_HIGH)
	; Set autoreload value
	mov RH0, #high(TIMER0_RELOAD_HIGH)
	mov RL0, #low(TIMER0_RELOAD_HIGH)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret

Timer0_OFF_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_OFF_RELOAD)
	mov TL0, #low(TIMER0_OFF_RELOAD)
	; Set autoreload value
	mov RH0, #high(TIMER0_OFF_RELOAD)
	mov RL0, #low(TIMER0_OFF_RELOAD)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret
	


Timer0_ISR:
	;clr TF0  ; According to the data sheet this is done for us already.
	cpl SOUND_OUT ; Connect speaker to P1.1!
	cpl SOUND_OUT1
	reti

;---------------------------------;
; Hardware initialization         ;
;---------------------------------;
Initialize_All:
    lcall InitTimer2
    lcall LCD_4BIT ; Initialize LCD
    setb EA
	ret

;---------------------------------;
; Main program loop               ;
;---------------------------------;
MyProgram:
    ; Initialize the hardware:
    mov SP, #7FH
    lcall Initialize_All
    setb P0.0 ; Pin is used as input

    
    lcall Timer0_Init
    lcall InitTimer2
    
    mov Seed+0, TH2
    mov Seed+1, #0x01
    mov Seed+2, #0x87
    mov Seed+3, TL2
	
	jb P1.0, music
	    
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    Wait_Milli_Seconds(#255)
    
	ljmp MyProgram
	
music:
	lcall TEST1
	ret 
	
TEST1:
	lcall Timer0_Rate_C4_Init
	Wait_Milli_Seconds(#1000)
	
TomAndJerry:
;140 notes/min ~400 ms
;Wait_Milli_Seconds(#400)

	; bar 5
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	
	;bar 6
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_FS4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200) ;tied notes
	Wait_Milli_Seconds(#200)
	
	;bar 7
	;lcall Timer0_Rate_C5_Init
	;Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_G4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_AS4_Init
	Wait_Milli_Seconds(#200)
	
	;bar 8
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_AS4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_F5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_F5_Init
	Wait_Milli_Seconds(#200)
	
	;bar 9
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_F5_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_G5_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_OFF_Init ;Rest
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_AS4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	
	;bar 10
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	
	;bar 11
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_FS5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	
	;bar 12
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_FS5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_E5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_CS5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_B4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	
	;bar 13
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_GS4_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_OFF_Init
	Wait_Milli_Seconds(#100) ;Rest
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_B3_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_C4_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_D4_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_DS4_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_E4_Init
	Wait_Milli_Seconds(#100)
	lcall Timer0_Rate_F4_Init
	Wait_Milli_Seconds(#100)
	
	;bar 14
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_D5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall TIMER0_OFF_INIT
	Wait_Milli_Seconds(#200)
	
	;bar 15
	lcall Timer0_Rate_AS4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_G4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_A4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_B4_Init
	Wait_Milli_Seconds(#200)
	lcall Timer0_Rate_C5_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	
	;bar 16
	lcall Timer0_Rate_G4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	
	lcall Timer0_Rate_F4_Init
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	Wait_Milli_Seconds(#200)
	ret
end
;At end, program jumps back to the very top